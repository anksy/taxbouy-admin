{"ast":null,"code":"var _jsxFileName = \"/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/routes/types.js\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PublicRoute(_ref) {\n  let {\n    component: Component,\n    isUserLoggedIn,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => isUserLoggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        /**specify the route on which user will redirect if the user is logged in \n         * and trying to access Without Login route*/\n        pathname: '/',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = PublicRoute;\nexport function PrivateRoute(_ref2) {\n  let {\n    component: Component,\n    isUserLoggedIn,\n    dispatch,\n    ...rest\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => isUserLoggedIn ? /*#__PURE__*/_jsxDEV(Component, {\n      dispatch: dispatch,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        /**specify the route on which you want to redirect in case of not logged in */\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_c2 = PrivateRoute;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PublicRoute\");\n$RefreshReg$(_c2, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/routes/types.js"],"names":["Route","Redirect","PublicRoute","component","Component","isUserLoggedIn","rest","props","pathname","state","from","location","PrivateRoute","dispatch"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;AAEA,OAAO,SAASC,WAAT,OAAwE;AAAA,MAAnD;AAAEC,IAAAA,SAAS,EAAEC,SAAb;AAAwBC,IAAAA,cAAxB;AAAwC,OAAGC;AAA3C,GAAmD;AAC3E,sBACI,QAAC,KAAD,OAAWA,IAAX;AAAiB,IAAA,MAAM,EAAEC,KAAK,IACzBF,cAAD,gBACI,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AACV;AACpB;AACoBG,QAAAA,QAAQ,EAAE,GAHA;AAIVC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAJG;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,gBAQQ,QAAC,SAAD,OAAeJ;AAAf;AAAA;AAAA;AAAA;AAAA;AATZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;KAfeL,W;AAiBhB,OAAO,SAASU,YAAT,QAAmF;AAAA,MAA7D;AAAET,IAAAA,SAAS,EAAEC,SAAb;AAAwBC,IAAAA,cAAxB;AAAwCQ,IAAAA,QAAxC;AAAkD,OAAGP;AAArD,GAA6D;AACtF,sBACI,QAAC,KAAD,OAAWA,IAAX;AAAiB,IAAA,MAAM,EAAEC,KAAK,IACzBF,cAAD,gBACI,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEQ,QAArB;AAAA,SAAmCN;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ,gBAGQ,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AACV;AACAC,QAAAA,QAAQ,EAAE,QAFA;AAGVC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAHG;AAAd;AAAA;AAAA;AAAA;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;MAdeC,Y","sourcesContent":["import { Route, Redirect } from \"react-router-dom\";\n\nexport function PublicRoute({ component: Component, isUserLoggedIn, ...rest }) {\n    return (\n        <Route {...rest} render={props => (\n            (isUserLoggedIn) ? (\n                <Redirect to={{\n                    /**specify the route on which user will redirect if the user is logged in \n                     * and trying to access Without Login route*/\n                    pathname: '/',\n                    state: { from: props.location }\n                }} />\n            ) : (\n                    <Component {...props} />\n                )\n        )} />\n    );\n}\n\nexport function PrivateRoute({ component: Component, isUserLoggedIn, dispatch, ...rest }) {\n    return (\n        <Route {...rest} render={props => (\n            (isUserLoggedIn) ? (\n                <Component dispatch={dispatch} {...props} />\n            ) : (\n                    <Redirect to={{\n                        /**specify the route on which you want to redirect in case of not logged in */\n                        pathname: '/login',\n                        state: { from: props.location }\n                    }} />\n                )\n        )} />\n    );\n}"]},"metadata":{},"sourceType":"module"}