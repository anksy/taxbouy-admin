{"ast":null,"code":"var _jsxFileName = \"/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/containers/Ecommerce/Category/upsert.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, Grid } from \"@material-ui/core\";\nimport { AppWrapper, ActionTray, ContentWrapper } from \"../../../components/global/styles\";\nimport Textfield from \"../../../components/form/Textfield\";\nimport Select from \"../../../components/form/Select\";\nimport Upload from \"../../../components/form/Upload\";\nimport { Required } from \"../../../constants/messages\";\nimport { defaultCategory } from \"../../../constants/defaults\";\nimport { httpVerbs, promiseStatus } from \"../../../constants\";\nimport { useGetCategoriesQuery, useUpsertCategoryMutation } from \"../../../services/query/category\";\nimport { toggleLoader, displayToastMessage } from \"../../../store/common/application.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  title: yup.string().required(Required),\n  parent: yup.number().required(Required),\n  image: yup.string(),\n  description: yup.string().required(Required),\n  isActive: yup.boolean().required(Required)\n});\n\nconst CategoryUpsertContainer = _ref => {\n  _s();\n\n  var _metaAttrs$data, _metaAttrs$error, _metaAttrs$error$data;\n\n  let {\n    history,\n    match: {\n      params\n    },\n    dispatch\n  } = _ref;\n  const [upsertCategory, metaAttrs] = useUpsertCategoryMutation();\n  const {\n    data: categoryData\n  } = useGetCategoriesQuery(undefined, {\n    selectFromResult: _ref2 => {\n      let {\n        data\n      } = _ref2;\n      return {\n        data: (data && (data === null || data === void 0 ? void 0 : data.data) || []).find(el => el.id === +params.resourceId)\n      };\n    }\n  });\n  const {\n    data\n  } = useGetCategoriesQuery();\n  const categories = (data === null || data === void 0 ? void 0 : data.data) || [];\n  const defaultCategoryData = categoryData ? { ...categoryData,\n    isActive: categoryData.is_active,\n    is_active: undefined,\n    createdAt: undefined,\n    slug: undefined\n  } : defaultCategory;\n  useEffect(() => {\n    if (!metaAttrs.isLoading) {\n      if (metaAttrs.status === promiseStatus.REJECTED) {\n        dispatch(toggleLoader(false));\n        dispatch(displayToastMessage({\n          open: true,\n          type: \"error\",\n          message: metaAttrs.error.data.message\n        }));\n      }\n\n      if (metaAttrs.status === promiseStatus.FULFILLED) {\n        dispatch(toggleLoader(false));\n        dispatch(displayToastMessage({\n          open: true,\n          type: \"success\",\n          message: metaAttrs.data.message\n        }));\n        history.push(`/categories`);\n      }\n    }\n  }, [metaAttrs.status, metaAttrs.isLoading, (_metaAttrs$data = metaAttrs.data) === null || _metaAttrs$data === void 0 ? void 0 : _metaAttrs$data.message, (_metaAttrs$error = metaAttrs.error) === null || _metaAttrs$error === void 0 ? void 0 : (_metaAttrs$error$data = _metaAttrs$error.data) === null || _metaAttrs$error$data === void 0 ? void 0 : _metaAttrs$error$data.message, dispatch, history]);\n\n  const onSubmit = async values => {\n    dispatch(toggleLoader(true));\n    await upsertCategory({\n      method: values.id ? httpVerbs.PUT : httpVerbs.POST,\n      body: values\n    });\n  };\n\n  const formik = useFormik({\n    initialValues: { ...defaultCategoryData\n    },\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      onSubmit(values);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(AppWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTray, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: categoryData !== null && categoryData !== void 0 && categoryData.id ? \"Edit Category\" : \"Add New Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: history.goBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Textfield, {\n              name: \"title\",\n              label: \"Title\",\n              placeholder: \"e.g Burger\",\n              value: formik.values.title,\n              onChange: formik.handleChange,\n              error: formik.touched.title && !!formik.errors.title,\n              helperText: formik.touched.title && formik.errors.title,\n              disabled: metaAttrs.isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              name: \"parent\",\n              label: \"Parent Category\",\n              value: formik.values.parent,\n              onChange: formik.handleChange,\n              onBlur: formik.handleBlur,\n              options: [{\n                label: \"Self\",\n                value: 0\n              }].concat(categories.map(el => ({\n                label: el.title,\n                value: el.id\n              }))),\n              error: formik.touched.parent && !!formik.errors.parent,\n              helperText: formik.touched.parent && formik.errors.parent,\n              disabled: metaAttrs.isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Upload, {\n              name: \"image\",\n              value: formik.values.image,\n              onChange: formik.setFieldValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Textfield, {\n              name: \"description\",\n              label: \"Description\",\n              value: formik.values.description,\n              onChange: formik.handleChange,\n              error: formik.touched.description && !!formik.errors.description,\n              helperText: formik.touched.description && formik.errors.description,\n              multiline: true,\n              rows: 5,\n              disabled: metaAttrs.isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              name: \"isActive\",\n              label: \"is Active?\",\n              variant: \"outlined\",\n              value: formik.values.isActive,\n              onChange: formik.handleChange,\n              onBlur: formik.handleBlur,\n              options: [{\n                label: \"Active\",\n                value: true\n              }, {\n                label: \"Disable\",\n                value: false\n              }],\n              error: formik.touched.isActive && !!formik.errors.isActive,\n              helperText: formik.touched.isActive && formik.errors.isActive,\n              disabled: metaAttrs.isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              type: \"submit\",\n              className: \"mr20\",\n              children: categoryData !== null && categoryData !== void 0 && categoryData.id ? \"Update\" : \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CategoryUpsertContainer, \"Ff/vASJOsJIH+hx9m4VcMZOf83U=\", false, function () {\n  return [useUpsertCategoryMutation, useGetCategoriesQuery, useGetCategoriesQuery, useFormik];\n});\n\n_c = CategoryUpsertContainer;\nexport default CategoryUpsertContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryUpsertContainer\");","map":{"version":3,"sources":["/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/containers/Ecommerce/Category/upsert.jsx"],"names":["React","useEffect","useFormik","yup","Button","Grid","AppWrapper","ActionTray","ContentWrapper","Textfield","Select","Upload","Required","defaultCategory","httpVerbs","promiseStatus","useGetCategoriesQuery","useUpsertCategoryMutation","toggleLoader","displayToastMessage","validationSchema","object","title","string","required","parent","number","image","description","isActive","boolean","CategoryUpsertContainer","history","match","params","dispatch","upsertCategory","metaAttrs","data","categoryData","undefined","selectFromResult","find","el","id","resourceId","categories","defaultCategoryData","is_active","createdAt","slug","isLoading","status","REJECTED","open","type","message","error","FULFILLED","push","onSubmit","values","method","PUT","POST","body","formik","initialValues","enableReinitialize","goBack","handleSubmit","handleChange","touched","errors","handleBlur","label","value","concat","map","setFieldValue"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, Grid } from \"@material-ui/core\";\nimport { AppWrapper, ActionTray, ContentWrapper } from \"../../../components/global/styles\";\nimport Textfield from \"../../../components/form/Textfield\";\nimport Select from \"../../../components/form/Select\";\nimport Upload from \"../../../components/form/Upload\";\nimport { Required } from \"../../../constants/messages\";\nimport { defaultCategory } from \"../../../constants/defaults\";\nimport { httpVerbs, promiseStatus } from \"../../../constants\";\nimport { useGetCategoriesQuery, useUpsertCategoryMutation } from \"../../../services/query/category\";\nimport { toggleLoader, displayToastMessage } from \"../../../store/common/application.slice\";\n\nconst validationSchema = yup.object({\n    title: yup\n        .string()\n        .required(Required),\n    parent: yup\n        .number()\n        .required(Required),\n    image: yup\n        .string(),\n    description: yup\n        .string()\n        .required(Required),\n    isActive: yup\n        .boolean()\n        .required(Required),\n});\n\n\nconst CategoryUpsertContainer = ({ history, match: { params }, dispatch }) => {\n    const [upsertCategory, metaAttrs] = useUpsertCategoryMutation();\n    const { data: categoryData } = useGetCategoriesQuery(undefined, {\n        selectFromResult: ({ data }) => {\n            return ({\n                data: ((data && data?.data) || []).find(el => el.id === +params.resourceId)\n            })\n        }\n    });\n\n    const { data } = useGetCategoriesQuery();\n    const categories = data?.data || [];\n\n\n    const defaultCategoryData = categoryData\n        ? {\n            ...categoryData,\n            isActive: categoryData.is_active,\n            is_active: undefined,\n            createdAt: undefined,\n            slug: undefined\n        } : defaultCategory;\n\n    useEffect(() => {\n        if (!metaAttrs.isLoading) {\n            if (metaAttrs.status === promiseStatus.REJECTED) {\n                dispatch(toggleLoader(false));\n                dispatch(displayToastMessage({\n                    open: true,\n                    type: \"error\",\n                    message: metaAttrs.error.data.message\n                }));\n            }\n\n            if (metaAttrs.status === promiseStatus.FULFILLED) {\n                dispatch(toggleLoader(false));\n                dispatch(displayToastMessage({\n                    open: true,\n                    type: \"success\",\n                    message: metaAttrs.data.message\n                }));\n                history.push(`/categories`);\n            }\n        }\n    }, [metaAttrs.status, metaAttrs.isLoading, metaAttrs.data?.message, metaAttrs.error?.data?.message, dispatch, history])\n\n    const onSubmit = async (values) => {\n        dispatch(toggleLoader(true));\n        await upsertCategory({ method: (values.id ? httpVerbs.PUT : httpVerbs.POST), body: values });\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            ...defaultCategoryData\n        },\n        validationSchema,\n        enableReinitialize: true,\n        onSubmit: (values) => {\n            onSubmit(values);\n        }\n    });\n\n    return (\n        <AppWrapper>\n            <ActionTray>\n                <h2>{categoryData?.id ? \"Edit Category\" : \"Add New Category\"}</h2>\n                <Button color=\"primary\" variant=\"contained\" onClick={history.goBack}>Back</Button>\n            </ActionTray>\n\n            <ContentWrapper>\n                <form onSubmit={formik.handleSubmit}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                            <Textfield\n                                name=\"title\"\n                                label=\"Title\"\n                                placeholder=\"e.g Burger\"\n                                value={formik.values.title}\n                                onChange={formik.handleChange}\n                                error={formik.touched.title && !!formik.errors.title}\n                                helperText={formik.touched.title && formik.errors.title}\n                                disabled={metaAttrs.isLoading}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Select\n                                name=\"parent\"\n                                label=\"Parent Category\"\n                                value={formik.values.parent}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                options={[{ label: \"Self\", value: 0 }].concat(categories.map(el => ({ label: el.title, value: el.id })))}\n                                error={formik.touched.parent && !!formik.errors.parent}\n                                helperText={formik.touched.parent && formik.errors.parent}\n                                disabled={metaAttrs.isLoading}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Upload name=\"image\" value={formik.values.image} onChange={formik.setFieldValue} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Textfield\n                                name=\"description\"\n                                label=\"Description\"\n                                value={formik.values.description}\n                                onChange={formik.handleChange}\n                                error={formik.touched.description && !!formik.errors.description}\n                                helperText={formik.touched.description && formik.errors.description}\n                                multiline\n                                rows={5}\n                                disabled={metaAttrs.isLoading}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Select\n                                name=\"isActive\"\n                                label=\"is Active?\"\n                                variant=\"outlined\"\n                                value={formik.values.isActive}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                options={[{ label: \"Active\", value: true }, { label: \"Disable\", value: false }]}\n                                error={formik.touched.isActive && !!formik.errors.isActive}\n                                helperText={formik.touched.isActive && formik.errors.isActive}\n                                disabled={metaAttrs.isLoading}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button color=\"primary\" variant=\"contained\" type=\"submit\" className=\"mr20\">\n                                {categoryData?.id ? \"Update\" : \"Create\"}\n                            </Button>\n                            {/* <Button color=\"primary\" variant=\"contained\" type=\"submit\" className=\"mr20 btn-trans\">\n                                Cancel\n                            </Button> */}\n                        </Grid>\n                    </Grid>\n                </form>\n            </ContentWrapper>\n        </AppWrapper>\n    );\n}\n\nexport default CategoryUpsertContainer;"]},"metadata":{},"sourceType":"module"}