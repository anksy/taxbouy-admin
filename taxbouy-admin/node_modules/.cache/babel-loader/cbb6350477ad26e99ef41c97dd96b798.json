{"ast":null,"code":"var _jsxFileName = \"/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/components/dialog/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Slide } from '@material-ui/core';\nimport { Close } from \"@material-ui/icons\";\nimport * as sc from \"./styles\";\nimport { displayModal } from \"../../store/common/application.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Transition = /*#__PURE__*/React.forwardRef(_c = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Transition;\nexport default function Modal(_ref) {\n  _s();\n\n  let {\n    open,\n    modalProps\n  } = _ref;\n  const dispatch = useDispatch();\n\n  const closeModal = () => {\n    dispatch(displayModal({\n      open: false,\n      modalProps: {}\n    }));\n  };\n\n  if (!open) {\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(sc.DialogWrapper, {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      TransitionComponent: Transition,\n      keepMounted: true,\n      fullWidth: true,\n      fullScreen: false,\n      maxWidth: \"sm\",\n      onClose: closeModal,\n      \"aria-labelledby\": \"dialog-title\",\n      \"aria-describedby\": \"dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(sc.DialogCloseButton, {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: closeModal,\n          children: /*#__PURE__*/_jsxDEV(Close, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"dialog-title\",\n        children: modalProps === null || modalProps === void 0 ? void 0 : modalProps.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), (modalProps === null || modalProps === void 0 ? void 0 : modalProps.component) && /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"dialog-description\",\n          children: /*#__PURE__*/_jsxDEV(modalProps.component, { ...modalProps.componentProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 43\n      }, this), (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okText) && (modalProps === null || modalProps === void 0 ? void 0 : modalProps.cancelText) && /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [(modalProps === null || modalProps === void 0 ? void 0 : modalProps.ok) && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: modalProps.ok,\n          color: \"primary\",\n          variant: \"contained\",\n          children: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okText) || \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 40\n        }, this), (modalProps === null || modalProps === void 0 ? void 0 : modalProps.cancelText) && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: closeModal,\n          color: \"primary\",\n          variant: \"outlined\",\n          children: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.cancelText) || \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 68\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Modal, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c3 = Modal;\nModal.defaultProps = {\n  open: false,\n  modalProps: {\n    title: \"Do you really want to delete this store?\",\n    ok: () => {},\n    okText: \"Confirm\",\n    cancel: () => {},\n    cancelText: \"Cancel\",\n    component: () => /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n    componentProps: {}\n  }\n};\nModal.propTypes = {\n  open: PropTypes.bool,\n  modalProps: PropTypes.shape({\n    title: PropTypes.string,\n    component: PropTypes.element.isRequired,\n    componentProps: PropTypes.object,\n    ok: PropTypes.func,\n    okText: PropTypes.string,\n    cancel: PropTypes.func,\n    cancelText: PropTypes.string\n  })\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$React.forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"Modal\");","map":{"version":3,"sources":["/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/components/dialog/index.jsx"],"names":["React","useDispatch","PropTypes","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","IconButton","Slide","Close","sc","displayModal","Transition","forwardRef","props","ref","Modal","open","modalProps","dispatch","closeModal","title","component","componentProps","okText","cancelText","ok","defaultProps","cancel","propTypes","bool","shape","string","element","isRequired","object","func"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,iBAAvD,EAA0EC,WAA1E,EAAuFC,UAAvF,EAAmGC,KAAnG,QAAgH,mBAAhH;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AACA,SAASC,YAAT,QAA6B,sCAA7B;;;AAEA,MAAMC,UAAU,gBAAGd,KAAK,CAACe,UAAN,MAAiB,SAASD,UAAT,CAAoBE,KAApB,EAA2BC,GAA3B,EAAgC;AAChE,sBAAO,QAAC,KAAD;AAAO,IAAA,SAAS,EAAC,IAAjB;AAAsB,IAAA,GAAG,EAAEA,GAA3B;AAAA,OAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAFkB,CAAnB;MAAMF,U;AAIN,eAAe,SAASI,KAAT,OAAqC;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;AAChD,QAAMC,QAAQ,GAAGpB,WAAW,EAA5B;;AAEA,QAAMqB,UAAU,GAAG,MAAM;AACrBD,IAAAA,QAAQ,CAACR,YAAY,CAAC;AAClBM,MAAAA,IAAI,EAAE,KADY;AAElBC,MAAAA,UAAU,EAAE;AAFM,KAAD,CAAb,CAAR;AAIH,GALD;;AAOA,MAAI,CAACD,IAAL,EAAW;AACP,WAAO,KAAP;AACH;;AAED,sBACI,QAAC,EAAD,CAAI,aAAJ;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,IAAI,EAAEA,IADV;AAEI,MAAA,mBAAmB,EAAEL,UAFzB;AAGI,MAAA,WAAW,MAHf;AAII,MAAA,SAAS,MAJb;AAKI,MAAA,UAAU,EAAE,KALhB;AAMI,MAAA,QAAQ,EAAC,IANb;AAOI,MAAA,OAAO,EAAEQ,UAPb;AAQI,yBAAgB,cARpB;AASI,0BAAiB,oBATrB;AAAA,8BAWI,QAAC,EAAD,CAAI,iBAAJ;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAEA,UAArB;AAAA,iCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAXJ,eAgBI,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,cAAhB;AAAA,kBAAgCF,UAAhC,aAAgCA,UAAhC,uBAAgCA,UAAU,CAAEG;AAA5C;AAAA;AAAA;AAAA;AAAA,cAhBJ,EAiBK,CAAAH,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEI,SAAZ,kBAAyB,QAAC,aAAD;AAAA,+BACtB,QAAC,iBAAD;AAAmB,UAAA,EAAE,EAAC,oBAAtB;AAAA,iCACI,QAAC,UAAD,CAAY,SAAZ,OAA0BJ,UAAU,CAACK;AAArC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADsB;AAAA;AAAA;AAAA;AAAA,cAjB9B,EAsBM,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,MAAZ,MAAsBN,UAAtB,aAAsBA,UAAtB,uBAAsBA,UAAU,CAAEO,UAAlC,CAAD,iBAAkD,QAAC,aAAD;AAAA,mBAC9C,CAAAP,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEQ,EAAZ,kBAAkB,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAER,UAAU,CAACQ,EAA5B;AAAgC,UAAA,KAAK,EAAC,SAAtC;AAAgD,UAAA,OAAO,EAAC,WAAxD;AAAA,oBACd,CAAAR,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,MAAZ,KAAsB;AADR;AAAA;AAAA;AAAA;AAAA,gBAD4B,EAI9C,CAAAN,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEO,UAAZ,kBAA0B,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEL,UAAjB;AAA6B,UAAA,KAAK,EAAC,SAAnC;AAA6C,UAAA,OAAO,EAAC,UAArD;AAAA,oBACtB,CAAAF,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEO,UAAZ,KAA0B;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJoB;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBvD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH;;GAjDuBT,K;UACHjB,W;;;MADGiB,K;AAmDxBA,KAAK,CAACW,YAAN,GAAqB;AACjBV,EAAAA,IAAI,EAAE,KADW;AAEjBC,EAAAA,UAAU,EAAE;AACRG,IAAAA,KAAK,EAAE,0CADC;AAERK,IAAAA,EAAE,EAAE,MAAM,CAAG,CAFL;AAGRF,IAAAA,MAAM,EAAE,SAHA;AAIRI,IAAAA,MAAM,EAAE,MAAM,CAAG,CAJT;AAKRH,IAAAA,UAAU,EAAE,QALJ;AAMRH,IAAAA,SAAS,EAAE,mBAAM,qCANT;AAORC,IAAAA,cAAc,EAAE;AAPR;AAFK,CAArB;AAaAP,KAAK,CAACa,SAAN,GAAkB;AACdZ,EAAAA,IAAI,EAAEjB,SAAS,CAAC8B,IADF;AAEdZ,EAAAA,UAAU,EAAElB,SAAS,CAAC+B,KAAV,CAAgB;AACxBV,IAAAA,KAAK,EAAErB,SAAS,CAACgC,MADO;AAExBV,IAAAA,SAAS,EAAEtB,SAAS,CAACiC,OAAV,CAAkBC,UAFL;AAGxBX,IAAAA,cAAc,EAAEvB,SAAS,CAACmC,MAHF;AAIxBT,IAAAA,EAAE,EAAE1B,SAAS,CAACoC,IAJU;AAKxBZ,IAAAA,MAAM,EAAExB,SAAS,CAACgC,MALM;AAMxBJ,IAAAA,MAAM,EAAE5B,SAAS,CAACoC,IANM;AAOxBX,IAAAA,UAAU,EAAEzB,SAAS,CAACgC;AAPE,GAAhB;AAFE,CAAlB","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Slide } from '@material-ui/core';\nimport { Close } from \"@material-ui/icons\";\nimport * as sc from \"./styles\";\nimport { displayModal } from \"../../store/common/application.slice\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Modal({ open, modalProps }) {\n    const dispatch = useDispatch();\n\n    const closeModal = () => {\n        dispatch(displayModal({\n            open: false,\n            modalProps: {}\n        }));\n    }\n\n    if (!open) {\n        return false;\n    }\n\n    return (\n        <sc.DialogWrapper>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                fullWidth\n                fullScreen={false}\n                maxWidth=\"sm\"\n                onClose={closeModal}\n                aria-labelledby=\"dialog-title\"\n                aria-describedby=\"dialog-description\"\n            >\n                <sc.DialogCloseButton>\n                    <IconButton onClick={closeModal}>\n                        <Close />\n                    </IconButton>\n                </sc.DialogCloseButton>\n                <DialogTitle id=\"dialog-title\">{modalProps?.title}</DialogTitle>\n                {modalProps?.component && <DialogContent>\n                    <DialogContentText id=\"dialog-description\">\n                        <modalProps.component {...modalProps.componentProps} />\n                    </DialogContentText>\n                </DialogContent>}\n                {(modalProps?.okText && modalProps?.cancelText) && <DialogActions>\n                    {modalProps?.ok && <Button onClick={modalProps.ok} color=\"primary\" variant=\"contained\">\n                        {modalProps?.okText || \"Confirm\"}\n                    </Button>}\n                    {modalProps?.cancelText && <Button onClick={closeModal} color=\"primary\" variant=\"outlined\">\n                        {modalProps?.cancelText || \"Cancel\"}\n                    </Button>}\n                </DialogActions>}\n            </Dialog>\n        </sc.DialogWrapper>\n    );\n}\n\nModal.defaultProps = {\n    open: false,\n    modalProps: {\n        title: \"Do you really want to delete this store?\",\n        ok: () => { },\n        okText: \"Confirm\",\n        cancel: () => { },\n        cancelText: \"Cancel\",\n        component: () => <></>,\n        componentProps: {}\n    }\n}\n\nModal.propTypes = {\n    open: PropTypes.bool,\n    modalProps: PropTypes.shape({\n        title: PropTypes.string,\n        component: PropTypes.element.isRequired,\n        componentProps: PropTypes.object,\n        ok: PropTypes.func,\n        okText: PropTypes.string,\n        cancel: PropTypes.func,\n        cancelText: PropTypes.string,\n    })\n}"]},"metadata":{},"sourceType":"module"}