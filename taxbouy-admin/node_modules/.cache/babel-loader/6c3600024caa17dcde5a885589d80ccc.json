{"ast":null,"code":"import { BaseUri, httpVerbs } from \"../../constants\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nconst url = \"product\";\nexport const productApi = createApi({\n  reducerPath: \"products\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: BaseUri,\n    prepareHeaders: headers => {\n      const token = localStorage.token;\n\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n\n      return headers;\n    }\n  }),\n  tagTypes: [url],\n  endpoints: builder => ({\n    getProducts: builder.query({\n      query: () => url,\n      providesTags: [url]\n    }),\n    upsertProduct: builder.mutation({\n      query: _ref => {\n        let {\n          method,\n          body\n        } = _ref;\n        return {\n          url,\n          method,\n          body\n        };\n      },\n      invalidatesTags: [url]\n    }),\n    deleteProduct: builder.mutation({\n      query: resourceId => ({\n        url: `${url}/${resourceId}`,\n        method: httpVerbs.DELETE\n      }),\n      invalidatesTags: [url]\n    })\n  })\n});\nexport const {\n  useGetProductsQuery,\n  useUpsertProductMutation,\n  useDeleteProductMutation\n} = productApi;","map":{"version":3,"sources":["/Users/Shruti_Bhateja/Documents/taxbouy-admin/taxbouy-admin/src/services/query/product.js"],"names":["BaseUri","httpVerbs","createApi","fetchBaseQuery","url","productApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","set","tagTypes","endpoints","builder","getProducts","query","providesTags","upsertProduct","mutation","method","body","invalidatesTags","deleteProduct","resourceId","DELETE","useGetProductsQuery","useUpsertProductMutation","useDeleteProductMutation"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,iBAAnC;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,MAAMC,GAAG,GAAG,SAAZ;AAEA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAAC;AAChCI,EAAAA,WAAW,EAAE,UADmB;AAEhCC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AACtBK,IAAAA,OAAO,EAAER,OADa;AAEtBS,IAAAA,cAAc,EAAGC,OAAD,IAAa;AACzB,YAAMC,KAAK,GAAGC,YAAY,CAACD,KAA3B;;AACA,UAAIA,KAAJ,EAAW;AACPD,QAAAA,OAAO,CAACG,GAAR,CAAY,eAAZ,EAA8B,UAASF,KAAM,EAA7C;AACH;;AAED,aAAOD,OAAP;AACH;AATqB,GAAD,CAFO;AAahCI,EAAAA,QAAQ,EAAE,CAACV,GAAD,CAbsB;AAchCW,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACrBC,IAAAA,WAAW,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBA,MAAAA,KAAK,EAAE,MAAMd,GADU;AAEvBe,MAAAA,YAAY,EAAE,CAACf,GAAD;AAFS,KAAd,CADQ;AAKrBgB,IAAAA,aAAa,EAAEJ,OAAO,CAACK,QAAR,CAAiB;AAC5BH,MAAAA,KAAK,EAAE;AAAA,YAAC;AAAEI,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAD;AAAA,eAAuB;AAAEnB,UAAAA,GAAF;AAAOkB,UAAAA,MAAP;AAAeC,UAAAA;AAAf,SAAvB;AAAA,OADqB;AAE5BC,MAAAA,eAAe,EAAE,CAACpB,GAAD;AAFW,KAAjB,CALM;AASrBqB,IAAAA,aAAa,EAAET,OAAO,CAACK,QAAR,CAAiB;AAC5BH,MAAAA,KAAK,EAAGQ,UAAD,KAAiB;AAAEtB,QAAAA,GAAG,EAAG,GAAEA,GAAI,IAAGsB,UAAW,EAA5B;AAA+BJ,QAAAA,MAAM,EAAErB,SAAS,CAAC0B;AAAjD,OAAjB,CADqB;AAE5BH,MAAAA,eAAe,EAAE,CAACpB,GAAD;AAFW,KAAjB;AATM,GAAd;AAdqB,CAAD,CAA5B;AA8BP,OAAO,MAAM;AAAEwB,EAAAA,mBAAF;AAAuBC,EAAAA,wBAAvB;AAAiDC,EAAAA;AAAjD,IAA8EzB,UAApF","sourcesContent":["import { BaseUri, httpVerbs } from \"../../constants\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst url = \"product\";\n\nexport const productApi = createApi({\n    reducerPath: \"products\",\n    baseQuery: fetchBaseQuery({\n        baseUrl: BaseUri,\n        prepareHeaders: (headers) => {\n            const token = localStorage.token;\n            if (token) {\n                headers.set('Authorization', `Bearer ${token}`)\n            }\n\n            return headers;\n        }\n    }),\n    tagTypes: [url],\n    endpoints: (builder) => ({\n        getProducts: builder.query({\n            query: () => url,\n            providesTags: [url]\n        }),\n        upsertProduct: builder.mutation({\n            query: ({ method, body }) => ({ url, method, body }),\n            invalidatesTags: [url]\n        }),\n        deleteProduct: builder.mutation({\n            query: (resourceId) => ({ url: `${url}/${resourceId}`, method: httpVerbs.DELETE }),\n            invalidatesTags: [url]\n        })\n    })\n});\n\nexport const { useGetProductsQuery, useUpsertProductMutation, useDeleteProductMutation } = productApi;"]},"metadata":{},"sourceType":"module"}